generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication & Users
model User {
  id                        String          @id @default(cuid())
  email                     String          @unique
  name                      String?
  phone                     String?         @unique
  role                      UserRole        @default(ATHLETIC_DIRECTOR)
  image                     String?
  emailVerified             DateTime?
  hashedPassword            String?
  resetToken                String?
  resetTokenExpiry          DateTime?
  schoolName                String?
  teamName                  String?
  mascot                    String?
  stripeCustomerId          String?
  subscriptionId            String?         @unique
  subscriptionStatus        String?
  cancellationDate          DateTime?
  deletionScheduledAt       DateTime?
  hasReceivedFreeTrial      Boolean         @default(false)
  plan                      String?         // e.g., "free", "standard_monthly", "standard_yearly", "business_yearly"
  trialEnd                  DateTime?
  googleCalendarRefreshToken String?        @db.Text // Store the token needed to get new access tokens
  googleCalendarAccessToken  String?        @db.Text
  calendarTokenExpiry        DateTime?
  googleCalendarId           String? // Optionally store the primary calendar ID
  googleCalendarEmail        String?
  city                      String?
  lastLoginAt               DateTime?
  lastLoginDate             DateTime?
  dailyLoginCount           Int             @default(0)
  // Relations
  organizationId             String
  subscription              Subscription?   @relation("UserSubscription", fields: [subscriptionId], references: [id], onDelete: SetNull)
  organization              Organization    @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  accounts                  Account[]
  sessions                  Session[]
  games                     Game[]          @relation("GameCreator")
  emailLogs                 EmailLog[]
  emailGroups               EmailGroup[]    @relation("UserEmailGroups")
  emailCampaigns            EmailCampaign[] @relation("UserEmailCampaigns")
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  @@index([organizationId])
  @@map("User")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}



model StripeWebhookEvent {
  id          String   @id
  type        String
  createdAt   DateTime @default(now())
  processedAt DateTime @default(now())
  @@map("StripeWebhookEvent")
}

model CustomColumn {
  id             String       @id @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
}

// Organization/School
model Organization {
  id             String          @id @default(cuid())
  name           String
  district       String?
  state          String?
  timezone       String          @default("America/New_York")
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  customColumns  CustomColumn[]
  emailGroups    EmailGroup[]    @relation("OrganizationEmailGroups")
  travelSettings TravelSettings?

  // Relations
  users     User[]
  teams     Team[]
  venues    Venue[]
  opponents Opponent[]
}

// Sports & Teams
model Sport {
  id     String @id @default(cuid())
  name   String @unique
  season Season
  teams  Team[]
}

model Team {
  id             String       @id @default(cuid())
  name           String
  level          TeamLevel
  gender         Gender?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  // Relations
  sportId        String
  sport          Sport        @relation(fields: [sportId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  homeGames      Game[]       @relation("HomeTeam")
  awayGames      Game[]       @relation("AwayTeam")

  @@index([organizationId])
  @@index([sportId])
}

// Games/Competitions
model Game {
  id                       String                 @id @default(cuid())
  date                     DateTime
  time                     String?
  status                   GameStatus             @default(SCHEDULED)
  notes                    String?                @db.Text
  isHome                   Boolean                @default(true)
  // Travel Information
  travelRequired           Boolean                @default(false)
  busTravel                Boolean                @default(false)
  estimatedTravelTime      Int? // minutes
  departureTime            DateTime?
  busCount                 Int?
  travelCost               Float?
  // AI Travel Recommendations
  recommendedDepartureTime DateTime?
  recommendedArrivalTime   DateTime?
  actualDepartureTime      DateTime?
  actualArrivalTime        DateTime?
  travelTimeMinutes        Int?
  autoFillBusInfo          Boolean                @default(false)
  // Calendar Integration
  calendarSynced           Boolean                @default(false)
  lastSyncedAt             DateTime?
  googleCalendarEventId    String? // The ID of the event in the user's calendar
  googleCalendarHtmlLink   String? // Optional: Link to the event
  // Custom fields (JSON for flexibility)
  customFields             Json?
  customData               Json?
  createdAt                DateTime               @default(now())
  updatedAt                DateTime               @updatedAt
  // Relations
  homeTeamId               String
  homeTeam                 Team                   @relation("HomeTeam", fields: [homeTeamId], references: [id])
  awayTeamId               String?
  awayTeam                 Team?                  @relation("AwayTeam", fields: [awayTeamId], references: [id])
  venueId                  String?
  venue                    Venue?                 @relation(fields: [venueId], references: [id])
  opponentId               String?
  opponent                 Opponent?              @relation(fields: [opponentId], references: [id])
  createdById              String
  createdBy                User                   @relation("GameCreator", fields: [createdById], references: [id])
  emailLogs                EmailLog[]
  travelRecommendations    TravelRecommendation[]

  @@index([homeTeamId])
  @@index([awayTeamId])
  @@index([date])
  @@index([venueId])
  @@index([opponentId])
}

// Venues/Locations
model Venue {
  id             String       @id @default(cuid())
  name           String
  address        String?
  city           String?
  state          String?
  zipCode        String?
  latitude       Float?
  longitude      Float?
  notes          String?      @db.Text
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  games          Game[]

  @@index([organizationId])
}

// Email Tracking
model EmailLog {
  id        String      @id @default(cuid())
  to        String[]
  cc        String[]
  subject   String
  body      String      @db.Text
  status    EmailStatus @default(PENDING)
  sentAt    DateTime?
  error     String?     @db.Text
  createdAt DateTime    @default(now())
  // Relations
  gameId    String?
  game      Game?       @relation(fields: [gameId], references: [id])
  sentById  String
  sentBy    User        @relation(fields: [sentById], references: [id])

  @@index([gameId])
  @@index([sentById])
  @@index([createdAt])
}

model Opponent {
  id             String       @id @default(cuid())
  name           String
  mascot         String?
  colors         String?
  contact        String?
  phone          String?
  email          String?
  notes          String?      @db.Text
  sortOrder      Int          @default(0) @map("sort_order")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  // Relations
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  games          Game[]

  @@index([organizationId, sortOrder])
  @@index([organizationId])
}

model TravelRecommendation {
  id                   String    @id @default(cuid())
  gameId               String
  game                 Game      @relation(fields: [gameId], references: [id])
  recommendedDeparture DateTime
  recommendedArrival   DateTime
  travelDuration       Int
  trafficCondition     String?
  weatherCondition     String?
  addedToGame          Boolean   @default(false)
  addedAt              DateTime?
  createdAt            DateTime  @default(now())

  @@index([gameId])
}

model TravelSettings {
  id                   String       @id @default(cuid())
  organizationId       String       @unique
  organization         Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  autoFillEnabled      Boolean      @default(false)
  defaultBufferMinutes Int          @default(45)
  busLoadingMinutes    Int          @default(15)
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model EmailGroup {
  id             String          @id @default(uuid())
  name           String
  userId         String
  organizationId String
  createdAt      DateTime        @default(now())
  user           User            @relation("UserEmailGroups", fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization?   @relation("OrganizationEmailGroups", fields: [organizationId], references: [id], onDelete: Cascade)
  emails         EmailAddress[]
  campaigns      EmailCampaign[]

  @@unique([organizationId, name])
  @@index([userId])
}

model EmailAddress {
  id      String     @id @default(uuid())
  email   String     @unique
  groupId String
  group   EmailGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model EmailCampaign {
  id        String      @id @default(uuid())
  name      String
  subject   String
  body      String
  groupId   String?
  sentAt    DateTime?
  createdAt DateTime    @default(now())
  userId    String
  user      User        @relation("UserEmailCampaigns", fields: [userId], references: [id], onDelete: Cascade)
  group     EmailGroup? @relation(fields: [groupId], references: [id], onDelete: SetNull)
}

model Subscription {
  id                 String    @id
  customerId         String
  status             String
  planPriceId        String?
  planProductId      String?
  planLookupKey      String?
  planNickname       String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAt           DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  canceledAt         DateTime?
  trialStart         DateTime?
  trialEnd           DateTime?
  endedAt            DateTime?
  latestInvoiceId    String?
  lastEventId        String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  users              User[]    @relation("UserSubscription")
  @@map("Subscription")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ATHLETIC_DIRECTOR
  ASSISTANT_AD
  COACH
  STAFF
  VENDOR_READ_ONLY
}

enum TeamLevel {
  VARSITY
  JV
  FRESHMAN
  MIDDLE_SCHOOL
  YOUTH
}

enum Gender {
  MALE
  FEMALE
  COED
}

enum Season {
  FALL
  WINTER
  SPRING
  SUMMER
}

enum GameStatus {
  SCHEDULED
  CONFIRMED
  POSTPONED
  CANCELLED
  COMPLETED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
  BOUNCED
}

enum SubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

enum PlanType {
  MONTHLY
  ANNUAL
}
