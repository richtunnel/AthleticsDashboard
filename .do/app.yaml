name: Deploy to DigitalOcean App Platform

on:
  push:
    branches: [main]

env:
  IMAGE_NAME: athletics-dashboard
  DO_REGION: sfo
  DOCKER_PLATFORM: linux/amd64

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DO_API_TOKEN }}

      # For Docker Hub, uncomment and configure login
      # - name: Log in to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600
        if: ${{ env.REGISTRY_TYPE != 'DOCKER_HUB' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate image metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_TYPE == 'DOCKER_HUB' && format('docker.io/{0}/{1}', secrets.DOCKERHUB_USERNAME, env.IMAGE_NAME) || format('registry.digitalocean.com/{0}', env.IMAGE_NAME) }}
          tags: |
            type=sha,format=long
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: ${{ env.DOCKER_PLATFORM }}
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ${{ secrets.NEXT_PUBLIC_API_URL && format('NEXT_PUBLIC_API_URL={0}', secrets.NEXT_PUBLIC_API_URL) || '' }}

      - name: Prepare App Spec with new tag
        run: |
          mkdir -p .do
          cp .do/app.yaml .do/app.rendered.yaml
          sed -i "s/TAG_TO_REPLACE/${{ steps.meta.outputs.tags }}/g" .do/app.rendered.yaml

      - name: Update DigitalOcean App
        run: doctl apps update ${{ secrets.DO_APP_ID }} --spec .do/app.rendered.yaml

      - name: Show deployment status
        run: doctl apps get-deployments ${{ secrets.DO_APP_ID }} --format ID,Phase,Progress,CreatedAt --no-header
